// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: musse.proto

#include "musse.pb.h"
#include "musse.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Musse_method_names[] = {
  "/Musse/setup",
  "/Musse/createOMAP",
  "/Musse/readStore",
  "/Musse/writeInStore",
  "/Musse/update",
  "/Musse/batchUpdate",
  "/Musse/search",
  "/Musse/search1",
  "/Musse/downloadStash",
  "/Musse/uploadStash",
  "/Musse/downloadOMAPRoot",
  "/Musse/uploadOMAPRoot",
};

std::unique_ptr< Musse::Stub> Musse::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Musse::Stub> stub(new Musse::Stub(channel));
  return stub;
}

Musse::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_setup_(Musse_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_createOMAP_(Musse_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_readStore_(Musse_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_writeInStore_(Musse_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_update_(Musse_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_batchUpdate_(Musse_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_search_(Musse_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_search1_(Musse_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_downloadStash_(Musse_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_uploadStash_(Musse_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_downloadOMAPRoot_(Musse_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_uploadOMAPRoot_(Musse_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Musse::Stub::setup(::grpc::ClientContext* context, const ::SetupMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setup_, context, request, response);
}

void Musse::Stub::experimental_async::setup(::grpc::ClientContext* context, const ::SetupMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::setup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::setup(::grpc::ClientContext* context, const ::SetupMessage* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, reactor);
}

void Musse::Stub::experimental_async::setup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Musse::Stub::AsyncsetupRaw(::grpc::ClientContext* context, const ::SetupMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Musse::Stub::PrepareAsyncsetupRaw(::grpc::ClientContext* context, const ::SetupMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setup_, context, request, false);
}

::grpc::Status Musse::Stub::createOMAP(::grpc::ClientContext* context, const ::CreateOMAPMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_createOMAP_, context, request, response);
}

void Musse::Stub::experimental_async::createOMAP(::grpc::ClientContext* context, const ::CreateOMAPMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_createOMAP_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::createOMAP(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_createOMAP_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::createOMAP(::grpc::ClientContext* context, const ::CreateOMAPMessage* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_createOMAP_, context, request, response, reactor);
}

void Musse::Stub::experimental_async::createOMAP(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_createOMAP_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Musse::Stub::AsynccreateOMAPRaw(::grpc::ClientContext* context, const ::CreateOMAPMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_createOMAP_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Musse::Stub::PrepareAsynccreateOMAPRaw(::grpc::ClientContext* context, const ::CreateOMAPMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_createOMAP_, context, request, false);
}

::grpc::Status Musse::Stub::readStore(::grpc::ClientContext* context, const ::ReadStoreRequest& request, ::SearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_readStore_, context, request, response);
}

void Musse::Stub::experimental_async::readStore(::grpc::ClientContext* context, const ::ReadStoreRequest* request, ::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_readStore_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::readStore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_readStore_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::readStore(::grpc::ClientContext* context, const ::ReadStoreRequest* request, ::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_readStore_, context, request, response, reactor);
}

void Musse::Stub::experimental_async::readStore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_readStore_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SearchResponse>* Musse::Stub::AsyncreadStoreRaw(::grpc::ClientContext* context, const ::ReadStoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SearchResponse>::Create(channel_.get(), cq, rpcmethod_readStore_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SearchResponse>* Musse::Stub::PrepareAsyncreadStoreRaw(::grpc::ClientContext* context, const ::ReadStoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SearchResponse>::Create(channel_.get(), cq, rpcmethod_readStore_, context, request, false);
}

::grpc::Status Musse::Stub::writeInStore(::grpc::ClientContext* context, const ::WriteStoreRequest& request, ::SearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_writeInStore_, context, request, response);
}

void Musse::Stub::experimental_async::writeInStore(::grpc::ClientContext* context, const ::WriteStoreRequest* request, ::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_writeInStore_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::writeInStore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_writeInStore_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::writeInStore(::grpc::ClientContext* context, const ::WriteStoreRequest* request, ::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_writeInStore_, context, request, response, reactor);
}

void Musse::Stub::experimental_async::writeInStore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_writeInStore_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SearchResponse>* Musse::Stub::AsyncwriteInStoreRaw(::grpc::ClientContext* context, const ::WriteStoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SearchResponse>::Create(channel_.get(), cq, rpcmethod_writeInStore_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SearchResponse>* Musse::Stub::PrepareAsyncwriteInStoreRaw(::grpc::ClientContext* context, const ::WriteStoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SearchResponse>::Create(channel_.get(), cq, rpcmethod_writeInStore_, context, request, false);
}

::grpc::Status Musse::Stub::update(::grpc::ClientContext* context, const ::UpdateMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_update_, context, request, response);
}

void Musse::Stub::experimental_async::update(::grpc::ClientContext* context, const ::UpdateMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_update_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_update_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::update(::grpc::ClientContext* context, const ::UpdateMessage* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_update_, context, request, response, reactor);
}

void Musse::Stub::experimental_async::update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Musse::Stub::AsyncupdateRaw(::grpc::ClientContext* context, const ::UpdateMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Musse::Stub::PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::UpdateMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_update_, context, request, false);
}

::grpc::Status Musse::Stub::batchUpdate(::grpc::ClientContext* context, const ::BatchUpdateMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_batchUpdate_, context, request, response);
}

void Musse::Stub::experimental_async::batchUpdate(::grpc::ClientContext* context, const ::BatchUpdateMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_batchUpdate_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::batchUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_batchUpdate_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::batchUpdate(::grpc::ClientContext* context, const ::BatchUpdateMessage* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_batchUpdate_, context, request, response, reactor);
}

void Musse::Stub::experimental_async::batchUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_batchUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Musse::Stub::AsyncbatchUpdateRaw(::grpc::ClientContext* context, const ::BatchUpdateMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_batchUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Musse::Stub::PrepareAsyncbatchUpdateRaw(::grpc::ClientContext* context, const ::BatchUpdateMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_batchUpdate_, context, request, false);
}

::grpc::Status Musse::Stub::search(::grpc::ClientContext* context, const ::SearchMessage& request, ::SearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_search_, context, request, response);
}

void Musse::Stub::experimental_async::search(::grpc::ClientContext* context, const ::SearchMessage* request, ::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::search(::grpc::ClientContext* context, const ::SearchMessage* request, ::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, reactor);
}

void Musse::Stub::experimental_async::search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SearchResponse>* Musse::Stub::AsyncsearchRaw(::grpc::ClientContext* context, const ::SearchMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SearchResponse>::Create(channel_.get(), cq, rpcmethod_search_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SearchResponse>* Musse::Stub::PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::SearchMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SearchResponse>::Create(channel_.get(), cq, rpcmethod_search_, context, request, false);
}

::grpc::Status Musse::Stub::search1(::grpc::ClientContext* context, const ::SearchMessage1& request, ::SearchResponse1* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_search1_, context, request, response);
}

void Musse::Stub::experimental_async::search1(::grpc::ClientContext* context, const ::SearchMessage1* request, ::SearchResponse1* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_search1_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::search1(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SearchResponse1* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_search1_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::search1(::grpc::ClientContext* context, const ::SearchMessage1* request, ::SearchResponse1* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_search1_, context, request, response, reactor);
}

void Musse::Stub::experimental_async::search1(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SearchResponse1* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_search1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SearchResponse1>* Musse::Stub::Asyncsearch1Raw(::grpc::ClientContext* context, const ::SearchMessage1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SearchResponse1>::Create(channel_.get(), cq, rpcmethod_search1_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SearchResponse1>* Musse::Stub::PrepareAsyncsearch1Raw(::grpc::ClientContext* context, const ::SearchMessage1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SearchResponse1>::Create(channel_.get(), cq, rpcmethod_search1_, context, request, false);
}

::grpc::Status Musse::Stub::downloadStash(::grpc::ClientContext* context, const ::DownloadStashMessage& request, ::DownloadStashResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_downloadStash_, context, request, response);
}

void Musse::Stub::experimental_async::downloadStash(::grpc::ClientContext* context, const ::DownloadStashMessage* request, ::DownloadStashResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_downloadStash_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::downloadStash(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DownloadStashResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_downloadStash_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::downloadStash(::grpc::ClientContext* context, const ::DownloadStashMessage* request, ::DownloadStashResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_downloadStash_, context, request, response, reactor);
}

void Musse::Stub::experimental_async::downloadStash(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DownloadStashResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_downloadStash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DownloadStashResponse>* Musse::Stub::AsyncdownloadStashRaw(::grpc::ClientContext* context, const ::DownloadStashMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::DownloadStashResponse>::Create(channel_.get(), cq, rpcmethod_downloadStash_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::DownloadStashResponse>* Musse::Stub::PrepareAsyncdownloadStashRaw(::grpc::ClientContext* context, const ::DownloadStashMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::DownloadStashResponse>::Create(channel_.get(), cq, rpcmethod_downloadStash_, context, request, false);
}

::grpc::Status Musse::Stub::uploadStash(::grpc::ClientContext* context, const ::UploadStashMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_uploadStash_, context, request, response);
}

void Musse::Stub::experimental_async::uploadStash(::grpc::ClientContext* context, const ::UploadStashMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_uploadStash_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::uploadStash(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_uploadStash_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::uploadStash(::grpc::ClientContext* context, const ::UploadStashMessage* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_uploadStash_, context, request, response, reactor);
}

void Musse::Stub::experimental_async::uploadStash(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_uploadStash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Musse::Stub::AsyncuploadStashRaw(::grpc::ClientContext* context, const ::UploadStashMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_uploadStash_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Musse::Stub::PrepareAsyncuploadStashRaw(::grpc::ClientContext* context, const ::UploadStashMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_uploadStash_, context, request, false);
}

::grpc::Status Musse::Stub::downloadOMAPRoot(::grpc::ClientContext* context, const ::DownloadRootMessage& request, ::DownloadRootResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_downloadOMAPRoot_, context, request, response);
}

void Musse::Stub::experimental_async::downloadOMAPRoot(::grpc::ClientContext* context, const ::DownloadRootMessage* request, ::DownloadRootResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_downloadOMAPRoot_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::downloadOMAPRoot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DownloadRootResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_downloadOMAPRoot_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::downloadOMAPRoot(::grpc::ClientContext* context, const ::DownloadRootMessage* request, ::DownloadRootResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_downloadOMAPRoot_, context, request, response, reactor);
}

void Musse::Stub::experimental_async::downloadOMAPRoot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DownloadRootResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_downloadOMAPRoot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DownloadRootResponse>* Musse::Stub::AsyncdownloadOMAPRootRaw(::grpc::ClientContext* context, const ::DownloadRootMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::DownloadRootResponse>::Create(channel_.get(), cq, rpcmethod_downloadOMAPRoot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::DownloadRootResponse>* Musse::Stub::PrepareAsyncdownloadOMAPRootRaw(::grpc::ClientContext* context, const ::DownloadRootMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::DownloadRootResponse>::Create(channel_.get(), cq, rpcmethod_downloadOMAPRoot_, context, request, false);
}

::grpc::Status Musse::Stub::uploadOMAPRoot(::grpc::ClientContext* context, const ::UploadRootMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_uploadOMAPRoot_, context, request, response);
}

void Musse::Stub::experimental_async::uploadOMAPRoot(::grpc::ClientContext* context, const ::UploadRootMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_uploadOMAPRoot_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::uploadOMAPRoot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_uploadOMAPRoot_, context, request, response, std::move(f));
}

void Musse::Stub::experimental_async::uploadOMAPRoot(::grpc::ClientContext* context, const ::UploadRootMessage* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_uploadOMAPRoot_, context, request, response, reactor);
}

void Musse::Stub::experimental_async::uploadOMAPRoot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_uploadOMAPRoot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Musse::Stub::AsyncuploadOMAPRootRaw(::grpc::ClientContext* context, const ::UploadRootMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_uploadOMAPRoot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Musse::Stub::PrepareAsyncuploadOMAPRootRaw(::grpc::ClientContext* context, const ::UploadRootMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_uploadOMAPRoot_, context, request, false);
}

Musse::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Musse_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Musse::Service, ::SetupMessage, ::google::protobuf::Empty>(
          std::mem_fn(&Musse::Service::setup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Musse_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Musse::Service, ::CreateOMAPMessage, ::google::protobuf::Empty>(
          std::mem_fn(&Musse::Service::createOMAP), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Musse_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Musse::Service, ::ReadStoreRequest, ::SearchResponse>(
          std::mem_fn(&Musse::Service::readStore), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Musse_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Musse::Service, ::WriteStoreRequest, ::SearchResponse>(
          std::mem_fn(&Musse::Service::writeInStore), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Musse_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Musse::Service, ::UpdateMessage, ::google::protobuf::Empty>(
          std::mem_fn(&Musse::Service::update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Musse_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Musse::Service, ::BatchUpdateMessage, ::google::protobuf::Empty>(
          std::mem_fn(&Musse::Service::batchUpdate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Musse_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Musse::Service, ::SearchMessage, ::SearchResponse>(
          std::mem_fn(&Musse::Service::search), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Musse_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Musse::Service, ::SearchMessage1, ::SearchResponse1>(
          std::mem_fn(&Musse::Service::search1), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Musse_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Musse::Service, ::DownloadStashMessage, ::DownloadStashResponse>(
          std::mem_fn(&Musse::Service::downloadStash), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Musse_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Musse::Service, ::UploadStashMessage, ::google::protobuf::Empty>(
          std::mem_fn(&Musse::Service::uploadStash), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Musse_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Musse::Service, ::DownloadRootMessage, ::DownloadRootResponse>(
          std::mem_fn(&Musse::Service::downloadOMAPRoot), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Musse_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Musse::Service, ::UploadRootMessage, ::google::protobuf::Empty>(
          std::mem_fn(&Musse::Service::uploadOMAPRoot), this)));
}

Musse::Service::~Service() {
}

::grpc::Status Musse::Service::setup(::grpc::ServerContext* context, const ::SetupMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Musse::Service::createOMAP(::grpc::ServerContext* context, const ::CreateOMAPMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Musse::Service::readStore(::grpc::ServerContext* context, const ::ReadStoreRequest* request, ::SearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Musse::Service::writeInStore(::grpc::ServerContext* context, const ::WriteStoreRequest* request, ::SearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Musse::Service::update(::grpc::ServerContext* context, const ::UpdateMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Musse::Service::batchUpdate(::grpc::ServerContext* context, const ::BatchUpdateMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Musse::Service::search(::grpc::ServerContext* context, const ::SearchMessage* request, ::SearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Musse::Service::search1(::grpc::ServerContext* context, const ::SearchMessage1* request, ::SearchResponse1* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Musse::Service::downloadStash(::grpc::ServerContext* context, const ::DownloadStashMessage* request, ::DownloadStashResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Musse::Service::uploadStash(::grpc::ServerContext* context, const ::UploadStashMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Musse::Service::downloadOMAPRoot(::grpc::ServerContext* context, const ::DownloadRootMessage* request, ::DownloadRootResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Musse::Service::uploadOMAPRoot(::grpc::ServerContext* context, const ::UploadRootMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


