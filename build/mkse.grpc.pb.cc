// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mkse.proto

#include "mkse.pb.h"
#include "mkse.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* MKSE_method_names[] = {
  "/MKSE/setup",
  "/MKSE/update",
  "/MKSE/batchUpdate",
  "/MKSE/search",
};

std::unique_ptr< MKSE::Stub> MKSE::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MKSE::Stub> stub(new MKSE::Stub(channel));
  return stub;
}

MKSE::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_setup_(MKSE_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_update_(MKSE_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_batchUpdate_(MKSE_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_search_(MKSE_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MKSE::Stub::setup(::grpc::ClientContext* context, const ::SetupMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setup_, context, request, response);
}

void MKSE::Stub::experimental_async::setup(::grpc::ClientContext* context, const ::SetupMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, std::move(f));
}

void MKSE::Stub::experimental_async::setup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, std::move(f));
}

void MKSE::Stub::experimental_async::setup(::grpc::ClientContext* context, const ::SetupMessage* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, reactor);
}

void MKSE::Stub::experimental_async::setup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MKSE::Stub::AsyncsetupRaw(::grpc::ClientContext* context, const ::SetupMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MKSE::Stub::PrepareAsyncsetupRaw(::grpc::ClientContext* context, const ::SetupMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setup_, context, request, false);
}

::grpc::Status MKSE::Stub::update(::grpc::ClientContext* context, const ::UpdateMessage& request, ::UpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_update_, context, request, response);
}

void MKSE::Stub::experimental_async::update(::grpc::ClientContext* context, const ::UpdateMessage* request, ::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_update_, context, request, response, std::move(f));
}

void MKSE::Stub::experimental_async::update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_update_, context, request, response, std::move(f));
}

void MKSE::Stub::experimental_async::update(::grpc::ClientContext* context, const ::UpdateMessage* request, ::UpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_update_, context, request, response, reactor);
}

void MKSE::Stub::experimental_async::update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UpdateResponse>* MKSE::Stub::AsyncupdateRaw(::grpc::ClientContext* context, const ::UpdateMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UpdateResponse>::Create(channel_.get(), cq, rpcmethod_update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::UpdateResponse>* MKSE::Stub::PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::UpdateMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UpdateResponse>::Create(channel_.get(), cq, rpcmethod_update_, context, request, false);
}

::grpc::Status MKSE::Stub::batchUpdate(::grpc::ClientContext* context, const ::BatchUpdateMessage& request, ::UpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_batchUpdate_, context, request, response);
}

void MKSE::Stub::experimental_async::batchUpdate(::grpc::ClientContext* context, const ::BatchUpdateMessage* request, ::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_batchUpdate_, context, request, response, std::move(f));
}

void MKSE::Stub::experimental_async::batchUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_batchUpdate_, context, request, response, std::move(f));
}

void MKSE::Stub::experimental_async::batchUpdate(::grpc::ClientContext* context, const ::BatchUpdateMessage* request, ::UpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_batchUpdate_, context, request, response, reactor);
}

void MKSE::Stub::experimental_async::batchUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_batchUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UpdateResponse>* MKSE::Stub::AsyncbatchUpdateRaw(::grpc::ClientContext* context, const ::BatchUpdateMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UpdateResponse>::Create(channel_.get(), cq, rpcmethod_batchUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::UpdateResponse>* MKSE::Stub::PrepareAsyncbatchUpdateRaw(::grpc::ClientContext* context, const ::BatchUpdateMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UpdateResponse>::Create(channel_.get(), cq, rpcmethod_batchUpdate_, context, request, false);
}

::grpc::Status MKSE::Stub::search(::grpc::ClientContext* context, const ::SearchMessage& request, ::SearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_search_, context, request, response);
}

void MKSE::Stub::experimental_async::search(::grpc::ClientContext* context, const ::SearchMessage* request, ::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, std::move(f));
}

void MKSE::Stub::experimental_async::search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, std::move(f));
}

void MKSE::Stub::experimental_async::search(::grpc::ClientContext* context, const ::SearchMessage* request, ::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, reactor);
}

void MKSE::Stub::experimental_async::search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SearchResponse>* MKSE::Stub::AsyncsearchRaw(::grpc::ClientContext* context, const ::SearchMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SearchResponse>::Create(channel_.get(), cq, rpcmethod_search_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SearchResponse>* MKSE::Stub::PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::SearchMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SearchResponse>::Create(channel_.get(), cq, rpcmethod_search_, context, request, false);
}

MKSE::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MKSE_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MKSE::Service, ::SetupMessage, ::google::protobuf::Empty>(
          std::mem_fn(&MKSE::Service::setup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MKSE_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MKSE::Service, ::UpdateMessage, ::UpdateResponse>(
          std::mem_fn(&MKSE::Service::update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MKSE_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MKSE::Service, ::BatchUpdateMessage, ::UpdateResponse>(
          std::mem_fn(&MKSE::Service::batchUpdate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MKSE_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MKSE::Service, ::SearchMessage, ::SearchResponse>(
          std::mem_fn(&MKSE::Service::search), this)));
}

MKSE::Service::~Service() {
}

::grpc::Status MKSE::Service::setup(::grpc::ServerContext* context, const ::SetupMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MKSE::Service::update(::grpc::ServerContext* context, const ::UpdateMessage* request, ::UpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MKSE::Service::batchUpdate(::grpc::ServerContext* context, const ::BatchUpdateMessage* request, ::UpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MKSE::Service::search(::grpc::ServerContext* context, const ::SearchMessage* request, ::SearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


