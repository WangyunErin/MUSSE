
syntax = "proto3";

import "google/protobuf/empty.proto";

service MKSE {

rpc setup (SetupMessage) returns (google.protobuf.Empty) {}

rpc update (UpdateMessage) returns (UpdateResponse) {}
rpc batchUpdate (BatchUpdateMessage) returns (UpdateResponse) {}

rpc search (SearchMessage) returns (SearchResponse) {}

}

message DownloadRootMessage{
    int32 userID = 1;
}

message DownloadRootResponse{
    int32 pos = 1;
    bytes value = 2;
}

message UploadRootMessage{
    int32 userID = 1;
    int32 pos = 2;
    bytes value = 3;
}

message DownloadStashMessage{
    int32 userID = 1;
}

message DownloadStashResponse{
    repeated int32 pos = 1;
    repeated bytes value = 2;
}

message UploadStashMessage{
    int32 userID = 1;
    repeated int32 pos = 2;
    repeated bytes value = 3;
}

message SetupMessage
{
    int32 maxQueueSize = 1;
}

message AddFileCntQueueMessage
{
    bytes value = 1;
    int32 userID = 2;
}

message BatchAddFileCntQueueMessage
{
    repeated bytes values = 1;
    int32 userID = 2;
}

message FileCntQueueRequestMessage
{    
    int32 userID = 1;
}

message FileCntDiffMessage
{
    repeated bytes value = 1;
}

message UpdateMerkleRootMessage
{
    bytes valuesRoot = 1;
    bytes queuesRoot = 2;
}

message GetMerkleRootMessage
{
    bytes valuesRoot = 1;
    bytes queuesRoot = 2;
}

message CreateOMAPMessage
{
    int32 num = 1;    
    int32 userID = 2;
}

message ReadStoreRequest
{
    repeated int32 poses = 1;
    int32 userID = 2;
}

message WriteStoreRequest
{
    repeated int32 pos = 1;
    repeated bytes value = 2;
    repeated int32 size = 3;
    int32 userID = 4;
}

message UpdateMessage
{
    bytes address = 1;
    bytes value = 2;
}

message UpdateResponse
{
    repeated bytes hashes = 1;   
    repeated int32 positions = 2;
    int32 treeSize = 3;
    int32 pos = 4;
}

message SearchMessage
{
    repeated bytes address = 1;    
}

message SearchResponse
{
    repeated bytes ciphertext = 1;  
    repeated int32 cipherSize = 2;
    repeated bytes hash = 3;   
    repeated int32 cipherPositions = 4;   
    int32 treeSize = 5;
    repeated int32 proofPosistions = 6;
    
}

message BatchUpdateMessage
{
    repeated bytes address = 1;   
    repeated bytes value = 2;   
}

message CommandMessage
{
    bytes cmd = 1;
    int32 size = 2;
}

message ResultMessage
{
    bytes result = 1;
    int32 size = 2;
}
